
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated.fr.ul.miage.expression;

import fr.ul.miage.arbre.*;
import java.util.ArrayList;
import java.util.List;
import tds.*;
import tds.Symbole.Type;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\035\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\005\000\002\010\005\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\032\005\000\002\032" +
    "\003\000\002\032\002\000\002\033\003\000\002\017\005" +
    "\000\002\012\012\000\002\023\011\000\002\016\004\000" +
    "\002\030\003\000\002\030\005\000\002\030\002\000\002" +
    "\024\015\000\002\024\014\000\002\034\003\000\002\034" +
    "\005\000\002\034\002\000\002\022\006\000\002\025\005" +
    "\000\002\027\003\000\002\027\005\000\002\027\003\000" +
    "\002\026\003\000\002\026\004\000\002\026\002\000\002" +
    "\013\012\000\002\015\007\000\002\014\003\000\002\014" +
    "\003\000\002\031\003\000\002\031\005\000\002\031\002" +
    "\000\002\021\004\000\002\020\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\005\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\010\002\uffcf\031\uffcf\040\005\001\002\000" +
    "\004\002\213\001\002\000\004\023\024\001\002\000\010" +
    "\002\uffd1\031\uffd1\040\005\001\002\000\006\002\uffd7\031" +
    "\011\001\002\000\004\002\000\001\002\000\006\023\016" +
    "\044\015\001\002\000\006\002\uffd9\022\013\001\002\000" +
    "\004\031\011\001\002\000\004\002\uffd8\001\002\000\004" +
    "\020\177\001\002\000\004\020\017\001\002\000\004\010" +
    "\020\001\002\000\006\011\uffdc\023\024\001\002\000\004" +
    "\020\176\001\002\000\006\011\uffde\033\174\001\002\000" +
    "\004\011\025\001\002\000\004\020\ufff3\001\002\000\004" +
    "\034\026\001\002\000\006\041\030\045\031\001\002\000" +
    "\026\020\040\023\024\024\055\030\047\036\042\037\045" +
    "\040\005\041\030\042\043\043\uffe4\001\002\000\004\023" +
    "\024\001\002\000\030\020\uffd2\023\uffd2\024\uffd2\030\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\001\002\000\032\020\uffd4\022\033\023\uffd4\024\uffd4" +
    "\030\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\001\002\000\004\041\030\001\002\000\030" +
    "\020\uffd3\023\uffd3\024\uffd3\030\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\001\002\000\004" +
    "\020\036\001\002\000\032\020\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\030\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\001\002\000\010\022\ufff1\035\ufff1\043" +
    "\ufff1\001\002\000\004\021\171\001\002\000\004\022\170" +
    "\001\002\000\004\020\167\001\002\000\004\010\153\001" +
    "\002\000\004\020\040\001\002\000\012\010\074\020\070" +
    "\036\042\046\066\001\002\000\010\022\uffef\035\uffef\043" +
    "\uffef\001\002\000\004\010\143\001\002\000\004\043\134" +
    "\001\002\000\010\022\uffee\035\uffee\043\uffee\001\002\000" +
    "\004\022\133\001\002\000\010\022\uffed\035\uffed\043\uffed" +
    "\001\002\000\010\022\uffec\035\uffec\043\uffec\001\002\000" +
    "\004\010\064\001\002\000\010\022\ufff0\035\ufff0\043\ufff0" +
    "\001\002\000\010\022\061\035\uffe5\043\uffe5\001\002\000" +
    "\010\022\ufff2\035\ufff2\043\ufff2\001\002\000\030\020\040" +
    "\023\024\024\055\030\047\035\uffe4\036\042\037\045\040" +
    "\005\041\030\042\043\043\uffe4\001\002\000\006\035\uffe3" +
    "\043\uffe3\001\002\000\006\035\uffe6\043\uffe6\001\002\000" +
    "\012\010\074\020\070\036\042\046\066\001\002\000\004" +
    "\011\123\001\002\000\036\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\022\uffc5\035\uffc5\043\uffc5\001\002\000\036\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\022\ufffa\035\ufffa\043" +
    "\ufffa\001\002\000\036\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\022\uffc4\035\uffc4\043\uffc4\001\002\000\036\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\022\uffc2\035\uffc2\043\uffc2" +
    "\001\002\000\036\004\ufffd\005\ufffd\006\103\007\102\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\022\ufffd\035\ufffd\043\ufffd\001\002\000\022\004\100\005" +
    "\077\012\107\013\114\014\110\015\112\016\113\017\111" +
    "\001\002\000\012\010\074\020\070\036\042\046\066\001" +
    "\002\000\010\004\100\005\077\011\076\001\002\000\036" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\022\uffc3\035\uffc3" +
    "\043\uffc3\001\002\000\012\010\074\020\070\036\042\046" +
    "\066\001\002\000\012\010\074\020\070\036\042\046\066" +
    "\001\002\000\036\004\uffff\005\uffff\006\103\007\102\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\022\uffff\035\uffff\043\uffff\001\002\000\012\010\074\020" +
    "\070\036\042\046\066\001\002\000\012\010\074\020\070" +
    "\036\042\046\066\001\002\000\036\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\022\ufffb\035\ufffb\043\ufffb\001\002\000" +
    "\036\004\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\022\ufffc\035" +
    "\ufffc\043\ufffc\001\002\000\032\004\ufffe\005\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\022" +
    "\ufffe\035\ufffe\043\ufffe\001\002\000\012\010\074\020\070" +
    "\036\042\046\066\001\002\000\012\010\074\020\070\036" +
    "\042\046\066\001\002\000\012\010\074\020\070\036\042" +
    "\046\066\001\002\000\012\010\074\020\070\036\042\046" +
    "\066\001\002\000\012\010\074\020\070\036\042\046\066" +
    "\001\002\000\012\010\074\020\070\036\042\046\066\001" +
    "\002\000\010\004\100\005\077\011\ufff7\001\002\000\010" +
    "\004\100\005\077\011\ufff4\001\002\000\010\004\100\005" +
    "\077\011\ufff5\001\002\000\010\004\100\005\077\011\ufff8" +
    "\001\002\000\010\004\100\005\077\011\ufff6\001\002\000" +
    "\010\004\100\005\077\011\ufff9\001\002\000\004\025\124" +
    "\001\002\000\004\034\125\001\002\000\026\020\040\023" +
    "\024\024\055\030\047\035\uffe4\036\042\037\045\040\005" +
    "\041\030\042\043\001\002\000\004\026\127\001\002\000" +
    "\004\034\125\001\002\000\010\022\uffe1\035\uffe1\043\uffe1" +
    "\001\002\000\004\035\132\001\002\000\014\022\uffe2\026" +
    "\uffe2\032\uffe2\035\uffe2\043\uffe2\001\002\000\010\022\uffe8" +
    "\035\uffe8\043\uffe8\001\002\000\004\010\137\001\002\000" +
    "\004\035\136\001\002\000\006\002\uffdb\022\uffdb\001\002" +
    "\000\012\010\074\020\070\036\042\046\066\001\002\000" +
    "\010\004\100\005\077\011\141\001\002\000\004\022\142" +
    "\001\002\000\004\035\uffcd\001\002\000\012\010\074\020" +
    "\070\036\042\046\066\001\002\000\004\011\145\001\002" +
    "\000\004\027\146\001\002\000\004\034\125\001\002\000" +
    "\004\032\150\001\002\000\010\022\uffe0\035\uffe0\043\uffe0" +
    "\001\002\000\014\004\100\005\077\022\uffc7\035\uffc7\043" +
    "\uffc7\001\002\000\010\022\uffe7\035\uffe7\043\uffe7\001\002" +
    "\000\004\020\154\001\002\000\004\010\155\001\002\000" +
    "\010\011\uffc8\020\157\046\156\001\002\000\006\011\uffcc" +
    "\022\uffcc\001\002\000\006\011\uffcb\022\uffcb\001\002\000" +
    "\006\011\uffca\022\165\001\002\000\004\011\162\001\002" +
    "\000\004\011\163\001\002\000\004\022\164\001\002\000" +
    "\010\022\uffce\035\uffce\043\uffce\001\002\000\006\020\157" +
    "\046\156\001\002\000\004\011\uffc9\001\002\000\036\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\022\uffc6\035\uffc6\043" +
    "\uffc6\001\002\000\010\022\uffe9\035\uffe9\043\uffe9\001\002" +
    "\000\014\010\074\020\070\036\042\042\043\046\066\001" +
    "\002\000\014\004\100\005\077\022\uffeb\035\uffeb\043\uffeb" +
    "\001\002\000\010\022\uffea\035\uffea\043\uffea\001\002\000" +
    "\004\023\024\001\002\000\004\011\uffdd\001\002\000\006" +
    "\011\uffdf\033\uffdf\001\002\000\004\010\200\001\002\000" +
    "\006\011\uffdc\023\024\001\002\000\004\011\202\001\002" +
    "\000\004\034\203\001\002\000\006\041\030\045\031\001" +
    "\002\000\026\020\040\023\024\024\055\030\047\035\uffe4" +
    "\036\042\037\045\040\005\041\030\042\043\001\002\000" +
    "\004\035\206\001\002\000\006\002\uffda\022\uffda\001\002" +
    "\000\006\002\uffd0\031\uffd0\001\002\000\004\020\211\001" +
    "\002\000\004\022\212\001\002\000\012\002\uffd6\022\uffd6" +
    "\031\uffd6\040\uffd6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\010\002\003\022\005\026\006\001\001\000" +
    "\002\001\001\000\004\035\207\001\001\000\004\022\206" +
    "\001\001\000\006\024\011\034\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\021\030\022\035\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\031" +
    "\027\026\001\001\000\032\007\056\010\057\011\036\012" +
    "\055\013\052\020\053\021\050\022\040\023\045\025\051" +
    "\032\047\035\043\001\001\000\004\035\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\151\001\001\000" +
    "\012\003\150\004\071\005\066\020\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\007\056\010\057\011\036" +
    "\012\055\013\052\020\053\021\050\022\040\023\045\025" +
    "\051\032\061\033\062\035\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\072\004\071\005\066\006" +
    "\064\020\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\074\004\071" +
    "\005\066\020\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\105\020\070\001\001\000\010\004\100" +
    "\005\066\020\070\001\001\000\002\001\001\000\006\005" +
    "\104\020\070\001\001\000\006\005\103\020\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\121\004\071\005\066\020\070\001\001\000\012" +
    "\003\120\004\071\005\066\020\070\001\001\000\012\003" +
    "\117\004\071\005\066\020\070\001\001\000\012\003\116" +
    "\004\071\005\066\020\070\001\001\000\012\003\115\004" +
    "\071\005\066\020\070\001\001\000\012\003\114\004\071" +
    "\005\066\020\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\125\001" +
    "\001\000\032\007\056\010\057\011\036\012\055\013\052" +
    "\020\053\021\050\022\040\023\045\025\051\032\130\035" +
    "\043\001\001\000\002\001\001\000\004\017\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\137\004\071\005\066\020\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\072\004\071\005\066\006\143\020\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\157\031\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\171\004\071\005\066\013\172\020" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\174\035\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\021\030\200\035\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\031\027\203\001\001\000\032\007\056\010\057\011\036" +
    "\012\055\013\052\020\053\021\050\022\040\023\045\025" +
    "\051\032\204\035\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public Prog program=new Prog();
	public TDS tds= new TDS();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action_part00000000(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programme EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programme ::= listeVariable listeFonction 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud lv = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Noeud> f = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
if(!f.isEmpty()){
    for(Noeud i: f){
	program.ajouterUnFils(i);
	}
}

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("programme",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= expression ADD facteur 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
									Plus resu =new Plus();
										resu.setFilsGauche(x);
										resu.setFilsDroit(f);
									 RESULT= resu;
 											
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= expression MOINS atome 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Moins resu=new Moins();
								resu.setFilsGauche(x);
								resu.setFilsDroit(a);
								RESULT=resu;
						  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= facteur 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // facteur ::= facteur MUL atome 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
					Multiplication resu=new Multiplication();
					resu.setFilsGauche(f);
					resu.setFilsDroit(a);
					RESULT=resu;
								
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // facteur ::= facteur DIV atome 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Division resu=new Division();
										resu.setFilsGauche(f);
										resu.setFilsDroit(a);
										RESULT=resu;
						  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // facteur ::= atome 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("facteur",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comparaison ::= expression EGAL expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Egal resu=new Egal();
										resu.setFilsGauche(x);
										resu.setFilsDroit(x1);
										RESULT=resu;
						  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparaison",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comparaison ::= expression DIFF expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Different resu=new Different();
										resu.setFilsGauche(x);
										resu.setFilsDroit(x1);
										RESULT=resu;
						  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparaison",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comparaison ::= expression SUP expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Superieur resu=new Superieur();
										resu.setFilsGauche(x);
										resu.setFilsDroit(x1);
										RESULT=resu;
						  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparaison",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comparaison ::= expression INF expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Inferieur resu=new Inferieur();
										resu.setFilsGauche(x);
										resu.setFilsDroit(x1);
										RESULT=resu;
						  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparaison",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comparaison ::= expression INFEGAL expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 InferieurEgal resu=new InferieurEgal();
										resu.setFilsGauche(x);
										resu.setFilsDroit(x1);
										RESULT=resu;
						  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparaison",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comparaison ::= expression SUPEGAL expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 SuperieurEgal resu=new SuperieurEgal();
										resu.setFilsGauche(x);
										resu.setFilsDroit(x1);
										RESULT=resu;
						  			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("comparaison",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= INT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruction ::= affectation 
            {
              Noeud RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud af = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=af;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruction ::= declaration 
            {
              Noeud RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud d = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=d;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruction ::= condition 
            {
              Noeud RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud c = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=c;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruction ::= boucle 
            {
              Noeud RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud b = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=b;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruction ::= ecriture 
            {
              Noeud RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud e = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=e;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruction ::= appel 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=a;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruction ::= lecture 
            {
              Noeud RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud l = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=l;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("instruction",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // affectation ::= IDF ASSIGN expression 
            {
              Noeud RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Affectation resu=new Affectation();
											Idf fils=new Idf(v);
										resu.setFilsGauche(fils);
										resu.setFilsDroit(x);
										RESULT=resu;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // affectation ::= IDF ASSIGN appel 
            {
              Noeud RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Affectation resu=new Affectation();
											Idf fils=new Idf(v);
										resu.setFilsGauche(fils);
										resu.setFilsDroit(a);
										RESULT=resu;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("affectation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= variableGlobale PV 
            {
              Noeud RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud v = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
								RESULT=v;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= varlocale PV 
            {
              Noeud RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud v1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
								RESULT=v1;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration ::= type affectation 
            {
              Noeud RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT= a;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listeInstruction ::= instruction PV suiteInstruction 
            {
              List<Noeud> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud i = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Noeud> s = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
				List<Noeud> liste=new ArrayList<Noeud>();
							liste.add(i); 
	for (Noeud node: s){
liste.add(node);
} 

					RESULT=liste;
                     
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeInstruction",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listeInstruction ::= instruction 
            {
              List<Noeud> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud i = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		List<Noeud> liste=new ArrayList<Noeud>();
							liste.add(i);  			
							RESULT=liste;
                     
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeInstruction",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listeInstruction ::= 
            {
              List<Noeud> RESULT =null;
		List<Noeud> liste=new ArrayList<Noeud>();
							RESULT=liste;
                     
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeInstruction",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // suiteInstruction ::= listeInstruction 
            {
              List<Noeud> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Noeud> l = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
                            RESULT = l;
                     
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("suiteInstruction",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // blocInstruction ::= AO listeInstruction AF 
            {
              Noeud RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<Noeud> l = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Bloc bloc=new Bloc();
								bloc.ajouterDesFils(l);
RESULT=bloc;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("blocInstruction",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= SI PO comparaison PF ALORS blocInstruction SINON blocInstruction 
            {
              Noeud RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Noeud c = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud b1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud b2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			 Si si =new Si(1);
             si.setCondition(c);
		      si.setBlocAlors((Bloc) b1);
		     si.setBlocSinon((Bloc) b2);
		RESULT=si;
			;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boucle ::= TANTQUE PO comparaison PF FAIT blocInstruction FIN 
            {
              Noeud RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Noeud c = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud b = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
								TantQue tq =new TantQue(1);
								
									tq.setCondition(c);
									tq.setBloc((Bloc) b);
		
								RESULT=tq
									;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("boucle",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametre ::= type IDF 
            {
              Noeud RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
								RESULT=new Idf(i);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parametre",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listeParametre ::= parametre 
            {
              List<Noeud> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud i = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 List<Noeud> liste=new ArrayList<Noeud>();
							liste.add(i);
							RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeParametre",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listeParametre ::= parametre Vi parametre 
            {
              List<Noeud> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud p1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud p2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		List<Noeud> liste=new ArrayList<Noeud>();
					liste.add(p1);
					liste.add(p2);
					RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeParametre",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listeParametre ::= 
            {
              List<Noeud> RESULT =null;
		List<Noeud> liste=new ArrayList<Noeud>();
                    RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeParametre",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fonction ::= FONCTION INT IDF PO listeParametre PF AO listeLocale listeInstruction retour AF 
            {
              Noeud RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		List<Noeud> p = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<Noeud> l = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Noeud> b = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud r = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
					Fonction fo=new Fonction(d);
			if (b!=null){
				    fo.ajouterDesFils(b);
}
					Retour rtn=new Retour(d);
					rtn.setLeFils(((Retour) r).getLeFils());
					fo.ajouterUnFils(rtn);
					
			SymbFonction f= new SymbFonction((String) d,Type.INT,p.size(),l.size());
			tds.Ajout(f);
    if(!p.isEmpty()){
        for(Noeud i: p){
        		Parametre pi= new Parametre((String) ((Idf) i).getValeur(),Type.INT,f);
				tds.Ajout(pi);
						}
				}
	if(!l.isEmpty()){
		for(Noeud i: l){
        		Locale lx= new Locale((String) ((Idf) i).getValeur(),Type.INT,f); 
				tds.Ajout(lx);
						}
					}
					RESULT=fo;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fonction ::= FONCTION VOID IDF PO listeParametre PF AO listeLocale listeInstruction AF 
            {
              Noeud RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		List<Noeud> p = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Noeud> l = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<Noeud> b = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
					Fonction fo=new Fonction(d);
if (b!=null){
				    fo.ajouterDesFils(b);
}
			
			SymbFonction f= new SymbFonction((String) d,Type.VOID,p.size(),l.size());
			tds.Ajout(f);
    			if(!p.isEmpty()){
        			for(Noeud i: p){
        				Parametre pi= new Parametre((String) ((Idf) i).getValeur(),Type.INT,f);
						tds.Ajout(pi);
								}
							}
						if(!l.isEmpty()){
							for(Noeud i: l){
        							Locale lx= new Locale((String) ((Idf) i).getValeur(),Type.INT,f); 
									tds.Ajout(lx);
									}
									}
					RESULT=fo;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("fonction",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listeFonction ::= fonction 
            {
              List<Noeud> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		List <Noeud> liste=new ArrayList<Noeud>();
							liste.add(f);
 RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeFonction",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listeFonction ::= fonction PV fonction 
            {
              List<Noeud> RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud f1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud f2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
					List <Noeud> liste=new ArrayList<Noeud>();
							liste.add(f1);
							liste.add(f2);
					
					RESULT=liste;
				
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeFonction",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listeFonction ::= 
            {
              List<Noeud> RESULT =null;
		List <Noeud> liste=new ArrayList<Noeud>();
							 RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeFonction",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variableGlobale ::= GLOBAL type IDF PV 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 Global fi =new Global((String) f, Type.INT,0);
										tds.Ajout(fi);
										RESULT=new Idf(f);

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variableGlobale",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // varlocale ::= LOCAL type IDF 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=new Idf(f);
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("varlocale",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listeLocale ::= varlocale 
            {
              List<Noeud> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud v = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		List<Noeud> liste=new ArrayList<Noeud>();
								liste.add(v);
RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeLocale",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listeLocale ::= varlocale PV varlocale 
            {
              List<Noeud> RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud v1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud v2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
								List<Noeud> liste=new ArrayList<Noeud>();
									liste.add(v1);
									liste.add(v2);
								;	
					RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeLocale",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listeLocale ::= RIEN 
            {
              List<Noeud> RESULT =null;
		List<Noeud> liste=new ArrayList<Noeud>();
		RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeLocale",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listeVariable ::= variableGlobale 
            {
              Noeud RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud v = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT=v;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeVariable",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listeVariable ::= variableGlobale variableGlobale 
            {
              Noeud RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud v1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud v2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
			
     if (v1.getFils()==null) {
							List <Noeud> liste=new ArrayList<Noeud>();
							liste.add(v2);
							v1.setFils(liste);
						}
						else {v1.ajouterUnFils(v2);}
					    RESULT=v1;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeVariable",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listeVariable ::= 
            {
              Noeud RESULT =null;
		RESULT=null;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeVariable",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // appel ::= APPEL PO IDF PO listeargument PF PF PV 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<Noeud> l = (List<Noeud>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		 Appel fo= new Appel(f);
												fo.ajouterDesFils(l);
										RESULT=fo;
										
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("appel",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // retour ::= RETOUR PO expression PF PV 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 Retour rtn=new Retour("f");
											rtn.setLeFils(x);
											RESULT=rtn;
											 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("retour",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // argument ::= NUM 
            {
              Noeud RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT= new Const(m); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("argument",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // argument ::= IDF 
            {
              Noeud RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=new Idf(p); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("argument",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listeargument ::= argument 
            {
              List<Noeud> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		List<Noeud> liste=new ArrayList<Noeud>();
								liste.add(a);
RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeargument",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listeargument ::= argument PV argument 
            {
              List<Noeud> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Noeud a1 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud a2 = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
								List<Noeud> liste=new ArrayList<Noeud>();
									liste.add(a1);
									liste.add(a2);
								;	
					RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeargument",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listeargument ::= 
            {
              List<Noeud> RESULT =null;
		List<Noeud> liste=new ArrayList<Noeud>();
		RESULT=liste;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("listeargument",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ecriture ::= ECRIRE expression 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		Ecrire ecr=new Ecrire();
							ecr.ajouterUnFils(x);
									RESULT=ecr;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ecriture",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lecture ::= LIRE IDF 
            {
              Noeud RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		Affectation aff= new Affectation();
						Idf i= new Idf(f);
						Lire lire = new Lire();
						aff.setFilsGauche(i);
						aff.setFilsDroit(lire); 
						RESULT=aff;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("lecture",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atome ::= NUM 
            {
              Noeud RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT= new Const(m); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atome ::= IDF 
            {
              Noeud RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=new Idf(p); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atome ::= PO expression PF 
            {
              Noeud RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Noeud x = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT=x ; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atome ::= lecture 
            {
              Noeud RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Noeud l = (Noeud)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT=l;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("atome",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
              return CUP$ParserCup$do_action_part00000000(
                               CUP$ParserCup$act_num,
                               CUP$ParserCup$parser,
                               CUP$ParserCup$stack,
                               CUP$ParserCup$top);
    }
}

}
